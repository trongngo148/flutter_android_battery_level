// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface MyMessage ()
+ (MyMessage *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation MyMessage
+ (instancetype)makeWithTitle:(NSString *)title
    body:(NSString *)body
    email:(NSString *)email {
  MyMessage* pigeonResult = [[MyMessage alloc] init];
  pigeonResult.title = title;
  pigeonResult.body = body;
  pigeonResult.email = email;
  return pigeonResult;
}
+ (MyMessage *)fromMap:(NSDictionary *)dict {
  MyMessage *pigeonResult = [[MyMessage alloc] init];
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.body = GetNullableObject(dict, @"body");
  NSAssert(pigeonResult.body != nil, @"");
  pigeonResult.email = GetNullableObject(dict, @"email");
  NSAssert(pigeonResult.email != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.title ? self.title : [NSNull null]), @"title", (self.body ? self.body : [NSNull null]), @"body", (self.email ? self.email : [NSNull null]), @"email", nil];
}
@end

@interface MessageApiCodecReader : FlutterStandardReader
@end
@implementation MessageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [MyMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MessageApiCodecWriter : FlutterStandardWriter
@end
@implementation MessageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[MyMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MessageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessageApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    MessageApiCodecReaderWriter *readerWriter = [[MessageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void MessageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.MessageApi.getMessage"
        binaryMessenger:binaryMessenger
        codec:MessageApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageFromEmail:error:)], @"MessageApi api (%@) doesn't respond to @selector(getMessageFromEmail:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_fromEmail = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSArray<MyMessage *> *output = [api getMessageFromEmail:arg_fromEmail error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
